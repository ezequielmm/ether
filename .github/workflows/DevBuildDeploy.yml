on: 
  workflow_dispatch:
  push:
    branches:
    - 'releases/dev'
  
jobs:
  selectEnvName:
    name: Select Name based on branch
    runs-on: ubuntu-latest
    outputs:
      deployEnv: ${{ steps.branchCheck.outputs.deployEnv }}
    steps:
      - id: branchCheck
        run: |
          if [ "${{ github.ref }}" == "refs/heads/releases/dev" ]; then
            echo "Develop Selected"
            echo "deployEnv=develop" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/releases/stage" ]; then
            echo "Stage Selected"
            echo "deployEnv=stage" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/releases/alpha" ]; then
            echo "Alpha Selected"
            echo "deployEnv=alpha" >> $GITHUB_OUTPUT
          else
            echo "Else Fired, Manual run of workflow goes to develop"
            echo "deployEnv=develop" >> $GITHUB_OUTPUT
          fi
          
      - name: Use variable setup in previous step
        run: echo "I'm using variable ${{ steps.branchCheck.outputs.deployEnv }}"

  testRunner:
    name: Test in ${{ matrix.testMode }} âœ¨
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - EditMode
          - PlayMode
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-test-project-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-test-project-
            Library-

      - name: Run tests
        uses: game-ci/unity-test-runner@v2
        id: testRunner
        with:
          testMode: ${{ matrix.testMode }}
          checkName: ${{ matrix.testMode }} test results
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          projectPath: ${{ vars.PROJECT_PATH }}

      - uses: actions/upload-artifact@v2
        with:
          name: Test results (${{ matrix.testMode }})
          path: ${{ steps.testRunner.outputs.artifactsPath }}

  buildWebGL:
    name: Build Project
    runs-on: ubuntu-latest
    # needs: testRunner
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-build-WebGL
          restore-keys: |
            Library-build-
            Library-

      - uses: game-ci/unity-builder@v2
        env: 
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL
          projectPath: ${{ vars.PROJECT_PATH }}
          buildsPath: build
          buildName: WebGL

      - uses: actions/upload-artifact@v2
        with:
          name: build-WebGL
          path: build/WebGL


  deployToDev:
    name: Deploy to dev
    needs: [buildWebGL, selectEnvName]
    environment: ${{ needs.selectEnvName.outputs.deployEnv }}
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Download WebGL Artifact
      uses: actions/download-artifact@v2
      with:
        name: build-WebGL
        path: builds

    - name: Deploy to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key : ${{ secrets.SSH_PRIV_KEY }}
        source: "builds"
        target: "/home/forge/client.dev.kote.robotseamonster.com/testBuild"
        overwrite: true
