/// <summary>
/// By SwanDEV 2018
/// </summary>

using UnityEngine;
using UnityEngine.UI;

public class ImageLoaderDemo : MonoBehaviour 
{
    public string m_ImageUrl = "";

    /// <summary>
    /// If 'true', for URL start with 'http', the loader will cache the image as per URL address. This will bypass the filename generating function to use the MD5 hash(generated by the URL) as the filename.
    /// </summary>
    [Header("[ Filename ]")]
    [Tooltip("If 'true', for URL start with 'http', the loader will cache the image as per URL address. This will bypass the filename generating function to use the MD5 hash(generated by the URL) as the filename.")]
    public bool m_CacheAsPerUrl = true;
    public string m_FileName = "";
    [Tooltip("Save the downloaded image using this extension name. eg.: .jpg or .png")]
    public string m_FileExtension = ".jpg";

    [Header("[ Folder ]")]
    public FilePathName.AppPath m_CacheDirectoryEnum = FilePathName.AppPath.PersistentDataPath;
    public string m_FolderName = "";
    [Range(0, 1000)] public uint m_MaxCacheFilePerFolder = 100;

    [Space()]
    public bool m_UseCache = true;
    public bool m_Replace = true;

    [Space()]
    public InputField m_InputField_FileName;
    public InputField m_InputField_FolderName;
    public InputField m_InputField_Url;
    public Toggle m_Toggle_UseCache;
    public Toggle m_Toggle_Replace;
    public Toggle m_Toggle_CacheAsPerURL;

    [Space()]
    public DImageDisplayHandler m_ImageDisplayHandler;
    [Tooltip("RawImage is better than Image for displaying texture. And, Image is suitable for displaying packed sprites.")]
    public RawImage m_RawImage;
    

    void _UpdateParameters()
    {
        m_ImageUrl = m_InputField_Url.text;
        m_FileName = m_InputField_FileName.text;
        m_FolderName = m_InputField_FolderName.text;
        m_UseCache = m_Toggle_UseCache.isOn;
        m_Replace = m_Toggle_Replace.isOn;
        m_CacheAsPerUrl = m_Toggle_CacheAsPerURL.isOn;
    }

    public void OnToggleChanged_CacheAsPerURL()
    {
        m_InputField_FileName.interactable = !m_Toggle_CacheAsPerURL.isOn;
    }

    public void OnButtonClick_LoadImage()
    {
        _UpdateParameters();

        IMBX.ImageLoader imageLoader = IMBX.ImageLoader.Create(m_MaxCacheFilePerFolder, m_CacheDirectoryEnum);

        IMBX.ImageLoader.CacheMode cacheMode = (m_UseCache) ? IMBX.ImageLoader.CacheMode.UseCached : (m_Replace) ? IMBX.ImageLoader.CacheMode.Replace : IMBX.ImageLoader.CacheMode.NoCache;

        imageLoader.LMGT.FileExtension = m_FileExtension;

        imageLoader.LMGT.CacheAsPerUrl = m_CacheAsPerUrl;

        imageLoader.Load(0, m_ImageUrl, m_FileName, m_FolderName, cacheMode, (texture, index) =>
        {
            if (texture != null)
            {
                m_ImageDisplayHandler.Clear(m_RawImage); // clear the previous texture (if any)
                m_ImageDisplayHandler.SetRawImage(m_RawImage, texture);
            }
            else
            {
                Debug.LogWarning("Fail loading, invalid format or file not exist? Load Path/Url: " + m_ImageUrl + 
                    "\nCache Path: " + System.IO.Path.Combine(System.IO.Path.Combine(imageLoader.LMGT.CacheDirectory, imageLoader.LMGT.FolderName), m_FileName + imageLoader.LMGT.FileExtension));
            }
        }, 0, 10);

        Debug.Log("Cache directory: " + System.IO.Path.Combine(imageLoader.LMGT.CacheDirectory, imageLoader.LMGT.FolderName) + " (" + m_FileName + imageLoader.LMGT.FileExtension + ")");
    }

}
